// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: client/v1/client.proto

package clientv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/deeploopdev/messageloop-protocol/gen/proto/go/client/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessageLoopServiceName is the fully-qualified name of the MessageLoopService service.
	MessageLoopServiceName = "messageloop.client.v1.MessageLoopService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageLoopServiceMessageLoopProcedure is the fully-qualified name of the MessageLoopService's
	// MessageLoop RPC.
	MessageLoopServiceMessageLoopProcedure = "/messageloop.client.v1.MessageLoopService/MessageLoop"
)

// MessageLoopServiceClient is a client for the messageloop.client.v1.MessageLoopService service.
type MessageLoopServiceClient interface {
	// 核心双向数据流
	MessageLoop(context.Context) *connect.BidiStreamForClient[v1.ClientMessage, v1.ServerMessage]
}

// NewMessageLoopServiceClient constructs a client for the messageloop.client.v1.MessageLoopService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageLoopServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessageLoopServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	messageLoopServiceMethods := v1.File_client_v1_client_proto.Services().ByName("MessageLoopService").Methods()
	return &messageLoopServiceClient{
		messageLoop: connect.NewClient[v1.ClientMessage, v1.ServerMessage](
			httpClient,
			baseURL+MessageLoopServiceMessageLoopProcedure,
			connect.WithSchema(messageLoopServiceMethods.ByName("MessageLoop")),
			connect.WithClientOptions(opts...),
		),
	}
}

// messageLoopServiceClient implements MessageLoopServiceClient.
type messageLoopServiceClient struct {
	messageLoop *connect.Client[v1.ClientMessage, v1.ServerMessage]
}

// MessageLoop calls messageloop.client.v1.MessageLoopService.MessageLoop.
func (c *messageLoopServiceClient) MessageLoop(ctx context.Context) *connect.BidiStreamForClient[v1.ClientMessage, v1.ServerMessage] {
	return c.messageLoop.CallBidiStream(ctx)
}

// MessageLoopServiceHandler is an implementation of the messageloop.client.v1.MessageLoopService
// service.
type MessageLoopServiceHandler interface {
	// 核心双向数据流
	MessageLoop(context.Context, *connect.BidiStream[v1.ClientMessage, v1.ServerMessage]) error
}

// NewMessageLoopServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageLoopServiceHandler(svc MessageLoopServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messageLoopServiceMethods := v1.File_client_v1_client_proto.Services().ByName("MessageLoopService").Methods()
	messageLoopServiceMessageLoopHandler := connect.NewBidiStreamHandler(
		MessageLoopServiceMessageLoopProcedure,
		svc.MessageLoop,
		connect.WithSchema(messageLoopServiceMethods.ByName("MessageLoop")),
		connect.WithHandlerOptions(opts...),
	)
	return "/messageloop.client.v1.MessageLoopService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageLoopServiceMessageLoopProcedure:
			messageLoopServiceMessageLoopHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageLoopServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageLoopServiceHandler struct{}

func (UnimplementedMessageLoopServiceHandler) MessageLoop(context.Context, *connect.BidiStream[v1.ClientMessage, v1.ServerMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.client.v1.MessageLoopService.MessageLoop is not implemented"))
}
