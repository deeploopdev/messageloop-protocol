// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: client/v1/client.proto

package clientv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageLoopService_MessageLoop_FullMethodName = "/messageloop.client.v1.MessageLoopService/MessageLoop"
)

// MessageLoopServiceClient is the client API for MessageLoopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageLoopServiceClient interface {
	// 核心双向数据流
	MessageLoop(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error)
}

type messageLoopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageLoopServiceClient(cc grpc.ClientConnInterface) MessageLoopServiceClient {
	return &messageLoopServiceClient{cc}
}

func (c *messageLoopServiceClient) MessageLoop(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ServerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageLoopService_ServiceDesc.Streams[0], MessageLoopService_MessageLoop_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ServerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageLoopService_MessageLoopClient = grpc.BidiStreamingClient[ClientMessage, ServerMessage]

// MessageLoopServiceServer is the server API for MessageLoopService service.
// All implementations must embed UnimplementedMessageLoopServiceServer
// for forward compatibility.
type MessageLoopServiceServer interface {
	// 核心双向数据流
	MessageLoop(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error
	mustEmbedUnimplementedMessageLoopServiceServer()
}

// UnimplementedMessageLoopServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageLoopServiceServer struct{}

func (UnimplementedMessageLoopServiceServer) MessageLoop(grpc.BidiStreamingServer[ClientMessage, ServerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method MessageLoop not implemented")
}
func (UnimplementedMessageLoopServiceServer) mustEmbedUnimplementedMessageLoopServiceServer() {}
func (UnimplementedMessageLoopServiceServer) testEmbeddedByValue()                            {}

// UnsafeMessageLoopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageLoopServiceServer will
// result in compilation errors.
type UnsafeMessageLoopServiceServer interface {
	mustEmbedUnimplementedMessageLoopServiceServer()
}

func RegisterMessageLoopServiceServer(s grpc.ServiceRegistrar, srv MessageLoopServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageLoopServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageLoopService_ServiceDesc, srv)
}

func _MessageLoopService_MessageLoop_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageLoopServiceServer).MessageLoop(&grpc.GenericServerStream[ClientMessage, ServerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageLoopService_MessageLoopServer = grpc.BidiStreamingServer[ClientMessage, ServerMessage]

// MessageLoopService_ServiceDesc is the grpc.ServiceDesc for MessageLoopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageLoopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messageloop.client.v1.MessageLoopService",
	HandlerType: (*MessageLoopServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageLoop",
			Handler:       _MessageLoopService_MessageLoop_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "client/v1/client.proto",
}
