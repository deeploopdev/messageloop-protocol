// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proxy/v1/proxy.proto

package proxyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProxyService_RPC_FullMethodName            = "/messageloop.proxy.v1.ProxyService/RPC"
	ProxyService_Authenticate_FullMethodName   = "/messageloop.proxy.v1.ProxyService/Authenticate"
	ProxyService_SubscribeAcl_FullMethodName   = "/messageloop.proxy.v1.ProxyService/SubscribeAcl"
	ProxyService_OnConnected_FullMethodName    = "/messageloop.proxy.v1.ProxyService/OnConnected"
	ProxyService_OnSubscribed_FullMethodName   = "/messageloop.proxy.v1.ProxyService/OnSubscribed"
	ProxyService_OnUnsubscribed_FullMethodName = "/messageloop.proxy.v1.ProxyService/OnUnsubscribed"
	ProxyService_OnDisconnected_FullMethodName = "/messageloop.proxy.v1.ProxyService/OnDisconnected"
)

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceClient interface {
	// 远程调用
	RPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCReply, error)
	// 认证
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateReply, error)
	// 订阅权限校验
	SubscribeAcl(ctx context.Context, in *SubscribeAclRequest, opts ...grpc.CallOption) (*SubscribeAclReply, error)
	OnConnected(ctx context.Context, in *OnConnectedRequest, opts ...grpc.CallOption) (*OnConnectedReply, error)
	OnSubscribed(ctx context.Context, in *OnSubscribedRequest, opts ...grpc.CallOption) (*OnSubscribedReply, error)
	OnUnsubscribed(ctx context.Context, in *OnUnsubscribedRequest, opts ...grpc.CallOption) (*OnUnsubscribedReply, error)
	OnDisconnected(ctx context.Context, in *OnDisconnectedRequest, opts ...grpc.CallOption) (*OnDisconnectedReply, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) RPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RPCReply)
	err := c.cc.Invoke(ctx, ProxyService_RPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateReply)
	err := c.cc.Invoke(ctx, ProxyService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) SubscribeAcl(ctx context.Context, in *SubscribeAclRequest, opts ...grpc.CallOption) (*SubscribeAclReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeAclReply)
	err := c.cc.Invoke(ctx, ProxyService_SubscribeAcl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) OnConnected(ctx context.Context, in *OnConnectedRequest, opts ...grpc.CallOption) (*OnConnectedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnConnectedReply)
	err := c.cc.Invoke(ctx, ProxyService_OnConnected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) OnSubscribed(ctx context.Context, in *OnSubscribedRequest, opts ...grpc.CallOption) (*OnSubscribedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnSubscribedReply)
	err := c.cc.Invoke(ctx, ProxyService_OnSubscribed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) OnUnsubscribed(ctx context.Context, in *OnUnsubscribedRequest, opts ...grpc.CallOption) (*OnUnsubscribedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnUnsubscribedReply)
	err := c.cc.Invoke(ctx, ProxyService_OnUnsubscribed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) OnDisconnected(ctx context.Context, in *OnDisconnectedRequest, opts ...grpc.CallOption) (*OnDisconnectedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnDisconnectedReply)
	err := c.cc.Invoke(ctx, ProxyService_OnDisconnected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations must embed UnimplementedProxyServiceServer
// for forward compatibility.
type ProxyServiceServer interface {
	// 远程调用
	RPC(context.Context, *RPCRequest) (*RPCReply, error)
	// 认证
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateReply, error)
	// 订阅权限校验
	SubscribeAcl(context.Context, *SubscribeAclRequest) (*SubscribeAclReply, error)
	OnConnected(context.Context, *OnConnectedRequest) (*OnConnectedReply, error)
	OnSubscribed(context.Context, *OnSubscribedRequest) (*OnSubscribedReply, error)
	OnUnsubscribed(context.Context, *OnUnsubscribedRequest) (*OnUnsubscribedReply, error)
	OnDisconnected(context.Context, *OnDisconnectedRequest) (*OnDisconnectedReply, error)
	mustEmbedUnimplementedProxyServiceServer()
}

// UnimplementedProxyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProxyServiceServer struct{}

func (UnimplementedProxyServiceServer) RPC(context.Context, *RPCRequest) (*RPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPC not implemented")
}
func (UnimplementedProxyServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedProxyServiceServer) SubscribeAcl(context.Context, *SubscribeAclRequest) (*SubscribeAclReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeAcl not implemented")
}
func (UnimplementedProxyServiceServer) OnConnected(context.Context, *OnConnectedRequest) (*OnConnectedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnConnected not implemented")
}
func (UnimplementedProxyServiceServer) OnSubscribed(context.Context, *OnSubscribedRequest) (*OnSubscribedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSubscribed not implemented")
}
func (UnimplementedProxyServiceServer) OnUnsubscribed(context.Context, *OnUnsubscribedRequest) (*OnUnsubscribedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUnsubscribed not implemented")
}
func (UnimplementedProxyServiceServer) OnDisconnected(context.Context, *OnDisconnectedRequest) (*OnDisconnectedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnDisconnected not implemented")
}
func (UnimplementedProxyServiceServer) mustEmbedUnimplementedProxyServiceServer() {}
func (UnimplementedProxyServiceServer) testEmbeddedByValue()                      {}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedProxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_RPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).RPC(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_SubscribeAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).SubscribeAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_SubscribeAcl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).SubscribeAcl(ctx, req.(*SubscribeAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_OnConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).OnConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_OnConnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).OnConnected(ctx, req.(*OnConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_OnSubscribed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnSubscribedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).OnSubscribed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_OnSubscribed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).OnSubscribed(ctx, req.(*OnSubscribedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_OnUnsubscribed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnUnsubscribedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).OnUnsubscribed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_OnUnsubscribed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).OnUnsubscribed(ctx, req.(*OnUnsubscribedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_OnDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnDisconnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).OnDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_OnDisconnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).OnDisconnected(ctx, req.(*OnDisconnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messageloop.proxy.v1.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPC",
			Handler:    _ProxyService_RPC_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _ProxyService_Authenticate_Handler,
		},
		{
			MethodName: "SubscribeAcl",
			Handler:    _ProxyService_SubscribeAcl_Handler,
		},
		{
			MethodName: "OnConnected",
			Handler:    _ProxyService_OnConnected_Handler,
		},
		{
			MethodName: "OnSubscribed",
			Handler:    _ProxyService_OnSubscribed_Handler,
		},
		{
			MethodName: "OnUnsubscribed",
			Handler:    _ProxyService_OnUnsubscribed_Handler,
		},
		{
			MethodName: "OnDisconnected",
			Handler:    _ProxyService_OnDisconnected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy/v1/proxy.proto",
}
