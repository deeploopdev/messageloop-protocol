// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proxy/v1/proxy.proto

package proxyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/deeplooplabs/messageloop-protocol/gen/proto/go/proxy/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProxyServiceName is the fully-qualified name of the ProxyService service.
	ProxyServiceName = "messageloop.proxy.v1.ProxyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProxyServiceRPCProcedure is the fully-qualified name of the ProxyService's RPC RPC.
	ProxyServiceRPCProcedure = "/messageloop.proxy.v1.ProxyService/RPC"
	// ProxyServiceAuthenticateProcedure is the fully-qualified name of the ProxyService's Authenticate
	// RPC.
	ProxyServiceAuthenticateProcedure = "/messageloop.proxy.v1.ProxyService/Authenticate"
	// ProxyServiceSubscribeAclProcedure is the fully-qualified name of the ProxyService's SubscribeAcl
	// RPC.
	ProxyServiceSubscribeAclProcedure = "/messageloop.proxy.v1.ProxyService/SubscribeAcl"
	// ProxyServiceOnConnectedProcedure is the fully-qualified name of the ProxyService's OnConnected
	// RPC.
	ProxyServiceOnConnectedProcedure = "/messageloop.proxy.v1.ProxyService/OnConnected"
	// ProxyServiceOnSubscribedProcedure is the fully-qualified name of the ProxyService's OnSubscribed
	// RPC.
	ProxyServiceOnSubscribedProcedure = "/messageloop.proxy.v1.ProxyService/OnSubscribed"
	// ProxyServiceOnUnsubscribedProcedure is the fully-qualified name of the ProxyService's
	// OnUnsubscribed RPC.
	ProxyServiceOnUnsubscribedProcedure = "/messageloop.proxy.v1.ProxyService/OnUnsubscribed"
	// ProxyServiceOnDisconnectedProcedure is the fully-qualified name of the ProxyService's
	// OnDisconnected RPC.
	ProxyServiceOnDisconnectedProcedure = "/messageloop.proxy.v1.ProxyService/OnDisconnected"
)

// ProxyServiceClient is a client for the messageloop.proxy.v1.ProxyService service.
type ProxyServiceClient interface {
	// 远程调用
	RPC(context.Context, *connect.Request[v1.RPCRequest]) (*connect.Response[v1.RPCReply], error)
	// 认证
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateReply], error)
	// 订阅权限校验
	SubscribeAcl(context.Context, *connect.Request[v1.SubscribeAclRequest]) (*connect.Response[v1.SubscribeAclReply], error)
	OnConnected(context.Context, *connect.Request[v1.OnConnectedRequest]) (*connect.Response[v1.OnConnectedReply], error)
	OnSubscribed(context.Context, *connect.Request[v1.OnSubscribedRequest]) (*connect.Response[v1.OnSubscribedReply], error)
	OnUnsubscribed(context.Context, *connect.Request[v1.OnUnsubscribedRequest]) (*connect.Response[v1.OnUnsubscribedReply], error)
	OnDisconnected(context.Context, *connect.Request[v1.OnDisconnectedRequest]) (*connect.Response[v1.OnDisconnectedReply], error)
}

// NewProxyServiceClient constructs a client for the messageloop.proxy.v1.ProxyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProxyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProxyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	proxyServiceMethods := v1.File_proxy_v1_proxy_proto.Services().ByName("ProxyService").Methods()
	return &proxyServiceClient{
		rPC: connect.NewClient[v1.RPCRequest, v1.RPCReply](
			httpClient,
			baseURL+ProxyServiceRPCProcedure,
			connect.WithSchema(proxyServiceMethods.ByName("RPC")),
			connect.WithClientOptions(opts...),
		),
		authenticate: connect.NewClient[v1.AuthenticateRequest, v1.AuthenticateReply](
			httpClient,
			baseURL+ProxyServiceAuthenticateProcedure,
			connect.WithSchema(proxyServiceMethods.ByName("Authenticate")),
			connect.WithClientOptions(opts...),
		),
		subscribeAcl: connect.NewClient[v1.SubscribeAclRequest, v1.SubscribeAclReply](
			httpClient,
			baseURL+ProxyServiceSubscribeAclProcedure,
			connect.WithSchema(proxyServiceMethods.ByName("SubscribeAcl")),
			connect.WithClientOptions(opts...),
		),
		onConnected: connect.NewClient[v1.OnConnectedRequest, v1.OnConnectedReply](
			httpClient,
			baseURL+ProxyServiceOnConnectedProcedure,
			connect.WithSchema(proxyServiceMethods.ByName("OnConnected")),
			connect.WithClientOptions(opts...),
		),
		onSubscribed: connect.NewClient[v1.OnSubscribedRequest, v1.OnSubscribedReply](
			httpClient,
			baseURL+ProxyServiceOnSubscribedProcedure,
			connect.WithSchema(proxyServiceMethods.ByName("OnSubscribed")),
			connect.WithClientOptions(opts...),
		),
		onUnsubscribed: connect.NewClient[v1.OnUnsubscribedRequest, v1.OnUnsubscribedReply](
			httpClient,
			baseURL+ProxyServiceOnUnsubscribedProcedure,
			connect.WithSchema(proxyServiceMethods.ByName("OnUnsubscribed")),
			connect.WithClientOptions(opts...),
		),
		onDisconnected: connect.NewClient[v1.OnDisconnectedRequest, v1.OnDisconnectedReply](
			httpClient,
			baseURL+ProxyServiceOnDisconnectedProcedure,
			connect.WithSchema(proxyServiceMethods.ByName("OnDisconnected")),
			connect.WithClientOptions(opts...),
		),
	}
}

// proxyServiceClient implements ProxyServiceClient.
type proxyServiceClient struct {
	rPC            *connect.Client[v1.RPCRequest, v1.RPCReply]
	authenticate   *connect.Client[v1.AuthenticateRequest, v1.AuthenticateReply]
	subscribeAcl   *connect.Client[v1.SubscribeAclRequest, v1.SubscribeAclReply]
	onConnected    *connect.Client[v1.OnConnectedRequest, v1.OnConnectedReply]
	onSubscribed   *connect.Client[v1.OnSubscribedRequest, v1.OnSubscribedReply]
	onUnsubscribed *connect.Client[v1.OnUnsubscribedRequest, v1.OnUnsubscribedReply]
	onDisconnected *connect.Client[v1.OnDisconnectedRequest, v1.OnDisconnectedReply]
}

// RPC calls messageloop.proxy.v1.ProxyService.RPC.
func (c *proxyServiceClient) RPC(ctx context.Context, req *connect.Request[v1.RPCRequest]) (*connect.Response[v1.RPCReply], error) {
	return c.rPC.CallUnary(ctx, req)
}

// Authenticate calls messageloop.proxy.v1.ProxyService.Authenticate.
func (c *proxyServiceClient) Authenticate(ctx context.Context, req *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateReply], error) {
	return c.authenticate.CallUnary(ctx, req)
}

// SubscribeAcl calls messageloop.proxy.v1.ProxyService.SubscribeAcl.
func (c *proxyServiceClient) SubscribeAcl(ctx context.Context, req *connect.Request[v1.SubscribeAclRequest]) (*connect.Response[v1.SubscribeAclReply], error) {
	return c.subscribeAcl.CallUnary(ctx, req)
}

// OnConnected calls messageloop.proxy.v1.ProxyService.OnConnected.
func (c *proxyServiceClient) OnConnected(ctx context.Context, req *connect.Request[v1.OnConnectedRequest]) (*connect.Response[v1.OnConnectedReply], error) {
	return c.onConnected.CallUnary(ctx, req)
}

// OnSubscribed calls messageloop.proxy.v1.ProxyService.OnSubscribed.
func (c *proxyServiceClient) OnSubscribed(ctx context.Context, req *connect.Request[v1.OnSubscribedRequest]) (*connect.Response[v1.OnSubscribedReply], error) {
	return c.onSubscribed.CallUnary(ctx, req)
}

// OnUnsubscribed calls messageloop.proxy.v1.ProxyService.OnUnsubscribed.
func (c *proxyServiceClient) OnUnsubscribed(ctx context.Context, req *connect.Request[v1.OnUnsubscribedRequest]) (*connect.Response[v1.OnUnsubscribedReply], error) {
	return c.onUnsubscribed.CallUnary(ctx, req)
}

// OnDisconnected calls messageloop.proxy.v1.ProxyService.OnDisconnected.
func (c *proxyServiceClient) OnDisconnected(ctx context.Context, req *connect.Request[v1.OnDisconnectedRequest]) (*connect.Response[v1.OnDisconnectedReply], error) {
	return c.onDisconnected.CallUnary(ctx, req)
}

// ProxyServiceHandler is an implementation of the messageloop.proxy.v1.ProxyService service.
type ProxyServiceHandler interface {
	// 远程调用
	RPC(context.Context, *connect.Request[v1.RPCRequest]) (*connect.Response[v1.RPCReply], error)
	// 认证
	Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateReply], error)
	// 订阅权限校验
	SubscribeAcl(context.Context, *connect.Request[v1.SubscribeAclRequest]) (*connect.Response[v1.SubscribeAclReply], error)
	OnConnected(context.Context, *connect.Request[v1.OnConnectedRequest]) (*connect.Response[v1.OnConnectedReply], error)
	OnSubscribed(context.Context, *connect.Request[v1.OnSubscribedRequest]) (*connect.Response[v1.OnSubscribedReply], error)
	OnUnsubscribed(context.Context, *connect.Request[v1.OnUnsubscribedRequest]) (*connect.Response[v1.OnUnsubscribedReply], error)
	OnDisconnected(context.Context, *connect.Request[v1.OnDisconnectedRequest]) (*connect.Response[v1.OnDisconnectedReply], error)
}

// NewProxyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProxyServiceHandler(svc ProxyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	proxyServiceMethods := v1.File_proxy_v1_proxy_proto.Services().ByName("ProxyService").Methods()
	proxyServiceRPCHandler := connect.NewUnaryHandler(
		ProxyServiceRPCProcedure,
		svc.RPC,
		connect.WithSchema(proxyServiceMethods.ByName("RPC")),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceAuthenticateHandler := connect.NewUnaryHandler(
		ProxyServiceAuthenticateProcedure,
		svc.Authenticate,
		connect.WithSchema(proxyServiceMethods.ByName("Authenticate")),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceSubscribeAclHandler := connect.NewUnaryHandler(
		ProxyServiceSubscribeAclProcedure,
		svc.SubscribeAcl,
		connect.WithSchema(proxyServiceMethods.ByName("SubscribeAcl")),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceOnConnectedHandler := connect.NewUnaryHandler(
		ProxyServiceOnConnectedProcedure,
		svc.OnConnected,
		connect.WithSchema(proxyServiceMethods.ByName("OnConnected")),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceOnSubscribedHandler := connect.NewUnaryHandler(
		ProxyServiceOnSubscribedProcedure,
		svc.OnSubscribed,
		connect.WithSchema(proxyServiceMethods.ByName("OnSubscribed")),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceOnUnsubscribedHandler := connect.NewUnaryHandler(
		ProxyServiceOnUnsubscribedProcedure,
		svc.OnUnsubscribed,
		connect.WithSchema(proxyServiceMethods.ByName("OnUnsubscribed")),
		connect.WithHandlerOptions(opts...),
	)
	proxyServiceOnDisconnectedHandler := connect.NewUnaryHandler(
		ProxyServiceOnDisconnectedProcedure,
		svc.OnDisconnected,
		connect.WithSchema(proxyServiceMethods.ByName("OnDisconnected")),
		connect.WithHandlerOptions(opts...),
	)
	return "/messageloop.proxy.v1.ProxyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProxyServiceRPCProcedure:
			proxyServiceRPCHandler.ServeHTTP(w, r)
		case ProxyServiceAuthenticateProcedure:
			proxyServiceAuthenticateHandler.ServeHTTP(w, r)
		case ProxyServiceSubscribeAclProcedure:
			proxyServiceSubscribeAclHandler.ServeHTTP(w, r)
		case ProxyServiceOnConnectedProcedure:
			proxyServiceOnConnectedHandler.ServeHTTP(w, r)
		case ProxyServiceOnSubscribedProcedure:
			proxyServiceOnSubscribedHandler.ServeHTTP(w, r)
		case ProxyServiceOnUnsubscribedProcedure:
			proxyServiceOnUnsubscribedHandler.ServeHTTP(w, r)
		case ProxyServiceOnDisconnectedProcedure:
			proxyServiceOnDisconnectedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProxyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProxyServiceHandler struct{}

func (UnimplementedProxyServiceHandler) RPC(context.Context, *connect.Request[v1.RPCRequest]) (*connect.Response[v1.RPCReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.proxy.v1.ProxyService.RPC is not implemented"))
}

func (UnimplementedProxyServiceHandler) Authenticate(context.Context, *connect.Request[v1.AuthenticateRequest]) (*connect.Response[v1.AuthenticateReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.proxy.v1.ProxyService.Authenticate is not implemented"))
}

func (UnimplementedProxyServiceHandler) SubscribeAcl(context.Context, *connect.Request[v1.SubscribeAclRequest]) (*connect.Response[v1.SubscribeAclReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.proxy.v1.ProxyService.SubscribeAcl is not implemented"))
}

func (UnimplementedProxyServiceHandler) OnConnected(context.Context, *connect.Request[v1.OnConnectedRequest]) (*connect.Response[v1.OnConnectedReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.proxy.v1.ProxyService.OnConnected is not implemented"))
}

func (UnimplementedProxyServiceHandler) OnSubscribed(context.Context, *connect.Request[v1.OnSubscribedRequest]) (*connect.Response[v1.OnSubscribedReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.proxy.v1.ProxyService.OnSubscribed is not implemented"))
}

func (UnimplementedProxyServiceHandler) OnUnsubscribed(context.Context, *connect.Request[v1.OnUnsubscribedRequest]) (*connect.Response[v1.OnUnsubscribedReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.proxy.v1.ProxyService.OnUnsubscribed is not implemented"))
}

func (UnimplementedProxyServiceHandler) OnDisconnected(context.Context, *connect.Request[v1.OnDisconnectedRequest]) (*connect.Response[v1.OnDisconnectedReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.proxy.v1.ProxyService.OnDisconnected is not implemented"))
}
