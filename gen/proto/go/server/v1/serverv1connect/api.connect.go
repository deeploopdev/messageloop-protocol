// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server/v1/api.proto

package serverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/deeplooplabs/messageloop-protocol/gen/proto/go/server/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// APIServiceName is the fully-qualified name of the APIService service.
	APIServiceName = "messageloop.server.v1.APIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APIServicePublishProcedure is the fully-qualified name of the APIService's Publish RPC.
	APIServicePublishProcedure = "/messageloop.server.v1.APIService/Publish"
	// APIServiceDisconnectProcedure is the fully-qualified name of the APIService's Disconnect RPC.
	APIServiceDisconnectProcedure = "/messageloop.server.v1.APIService/Disconnect"
	// APIServiceSubscribeProcedure is the fully-qualified name of the APIService's Subscribe RPC.
	APIServiceSubscribeProcedure = "/messageloop.server.v1.APIService/Subscribe"
	// APIServiceUnsubscribeProcedure is the fully-qualified name of the APIService's Unsubscribe RPC.
	APIServiceUnsubscribeProcedure = "/messageloop.server.v1.APIService/Unsubscribe"
)

// APIServiceClient is a client for the messageloop.server.v1.APIService service.
type APIServiceClient interface {
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishReply], error)
	Disconnect(context.Context, *connect.Request[v1.DisconnectRequest]) (*connect.Response[v1.DisconnectReply], error)
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.SubscribeReply], error)
	Unsubscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.UnsubscribeReply], error)
}

// NewAPIServiceClient constructs a client for the messageloop.server.v1.APIService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPIServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) APIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	aPIServiceMethods := v1.File_server_v1_api_proto.Services().ByName("APIService").Methods()
	return &aPIServiceClient{
		publish: connect.NewClient[v1.PublishRequest, v1.PublishReply](
			httpClient,
			baseURL+APIServicePublishProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("Publish")),
			connect.WithClientOptions(opts...),
		),
		disconnect: connect.NewClient[v1.DisconnectRequest, v1.DisconnectReply](
			httpClient,
			baseURL+APIServiceDisconnectProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("Disconnect")),
			connect.WithClientOptions(opts...),
		),
		subscribe: connect.NewClient[v1.SubscribeRequest, v1.SubscribeReply](
			httpClient,
			baseURL+APIServiceSubscribeProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("Subscribe")),
			connect.WithClientOptions(opts...),
		),
		unsubscribe: connect.NewClient[v1.SubscribeRequest, v1.UnsubscribeReply](
			httpClient,
			baseURL+APIServiceUnsubscribeProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("Unsubscribe")),
			connect.WithClientOptions(opts...),
		),
	}
}

// aPIServiceClient implements APIServiceClient.
type aPIServiceClient struct {
	publish     *connect.Client[v1.PublishRequest, v1.PublishReply]
	disconnect  *connect.Client[v1.DisconnectRequest, v1.DisconnectReply]
	subscribe   *connect.Client[v1.SubscribeRequest, v1.SubscribeReply]
	unsubscribe *connect.Client[v1.SubscribeRequest, v1.UnsubscribeReply]
}

// Publish calls messageloop.server.v1.APIService.Publish.
func (c *aPIServiceClient) Publish(ctx context.Context, req *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishReply], error) {
	return c.publish.CallUnary(ctx, req)
}

// Disconnect calls messageloop.server.v1.APIService.Disconnect.
func (c *aPIServiceClient) Disconnect(ctx context.Context, req *connect.Request[v1.DisconnectRequest]) (*connect.Response[v1.DisconnectReply], error) {
	return c.disconnect.CallUnary(ctx, req)
}

// Subscribe calls messageloop.server.v1.APIService.Subscribe.
func (c *aPIServiceClient) Subscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.SubscribeReply], error) {
	return c.subscribe.CallUnary(ctx, req)
}

// Unsubscribe calls messageloop.server.v1.APIService.Unsubscribe.
func (c *aPIServiceClient) Unsubscribe(ctx context.Context, req *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.UnsubscribeReply], error) {
	return c.unsubscribe.CallUnary(ctx, req)
}

// APIServiceHandler is an implementation of the messageloop.server.v1.APIService service.
type APIServiceHandler interface {
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishReply], error)
	Disconnect(context.Context, *connect.Request[v1.DisconnectRequest]) (*connect.Response[v1.DisconnectReply], error)
	Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.SubscribeReply], error)
	Unsubscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.UnsubscribeReply], error)
}

// NewAPIServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPIServiceHandler(svc APIServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aPIServiceMethods := v1.File_server_v1_api_proto.Services().ByName("APIService").Methods()
	aPIServicePublishHandler := connect.NewUnaryHandler(
		APIServicePublishProcedure,
		svc.Publish,
		connect.WithSchema(aPIServiceMethods.ByName("Publish")),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceDisconnectHandler := connect.NewUnaryHandler(
		APIServiceDisconnectProcedure,
		svc.Disconnect,
		connect.WithSchema(aPIServiceMethods.ByName("Disconnect")),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceSubscribeHandler := connect.NewUnaryHandler(
		APIServiceSubscribeProcedure,
		svc.Subscribe,
		connect.WithSchema(aPIServiceMethods.ByName("Subscribe")),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceUnsubscribeHandler := connect.NewUnaryHandler(
		APIServiceUnsubscribeProcedure,
		svc.Unsubscribe,
		connect.WithSchema(aPIServiceMethods.ByName("Unsubscribe")),
		connect.WithHandlerOptions(opts...),
	)
	return "/messageloop.server.v1.APIService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case APIServicePublishProcedure:
			aPIServicePublishHandler.ServeHTTP(w, r)
		case APIServiceDisconnectProcedure:
			aPIServiceDisconnectHandler.ServeHTTP(w, r)
		case APIServiceSubscribeProcedure:
			aPIServiceSubscribeHandler.ServeHTTP(w, r)
		case APIServiceUnsubscribeProcedure:
			aPIServiceUnsubscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAPIServiceHandler struct{}

func (UnimplementedAPIServiceHandler) Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.server.v1.APIService.Publish is not implemented"))
}

func (UnimplementedAPIServiceHandler) Disconnect(context.Context, *connect.Request[v1.DisconnectRequest]) (*connect.Response[v1.DisconnectReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.server.v1.APIService.Disconnect is not implemented"))
}

func (UnimplementedAPIServiceHandler) Subscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.SubscribeReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.server.v1.APIService.Subscribe is not implemented"))
}

func (UnimplementedAPIServiceHandler) Unsubscribe(context.Context, *connect.Request[v1.SubscribeRequest]) (*connect.Response[v1.UnsubscribeReply], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("messageloop.server.v1.APIService.Unsubscribe is not implemented"))
}
